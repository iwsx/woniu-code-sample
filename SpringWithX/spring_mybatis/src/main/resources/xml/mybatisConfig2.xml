<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--
        mybatis可以使用properties来引入外部properties配置文件内容
        resource：引入类路径下资源
        url：引入网络或磁盘资源
    -->
    <properties resource="properties/db.properties"></properties>
    <!--
     | 全局配置设置
     |
     | 可配置选项                                        默认值, 描述
     |
     | aggressiveLazyLoading     true, 当设置为‘true’的时候，懒加载的对象可能被任何懒属性全部加载。否则，每个属性都按需加载。
     | multipleResultSetsEnabled true, 允许和不允许单条语句返回多个数据集（取决于驱动需求）
     | useColumnLabel            true, 使用列标签代替列名称。不同的驱动器有不同的作法。参考一下驱动器文档，或者用这两个不同的选项进行测试一下。
     | useGeneratedKeys          false, 允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。
     | autoMappingBehavior       PARTIAL, 指定MyBatis 是否并且如何来自动映射数据表字段与对象的属性。PARTIAL将只自动映射简单的，没有嵌套的结果。FULL 将自动映射所有复杂的结果。
     | defaultExecutorType       SIMPLE, 配置和设定执行器，SIMPLE 执行器执行其它语句。REUSE 执行器可能重复使用prepared statements 语句，BATCH执行器可以重复执行语句和批量更新。
     | defaultStatementTimeout   null, 设置一个时限，以决定让驱动器等待数据库回应的多长时间为超时
     | -->
    <settings>
        <!-- 这个配置使全局的映射器启用或禁用缓存 -->
        <setting name="cacheEnabled" value="true"/>
        <!--
            全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载
            延迟加载：需要把lazyLoadingEnabled设为true
                        aggressiveLazyLoading设为false
        -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--
        <setting name="multipleResultSetsEnabled" value="true"/>
        <setting name="useColumnLabel" value="true"/>
        <setting name="defaultExecutorType" value="REUSE"/>
        <setting name="defaultStatementTimeout" value="25000"/>-->
        <!--设置启用数据库字段下划线映射到java对象的驼峰式命名属性，默认为false-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <setting name="logImpl" value="STDOUT_LOGGING"/>
    </settings>
    <!--类型命名-->
    <!--<typeAliases></typeAliases>-->
    <!--类型处理器-->
    <!--<typeHandlers></typeHandlers>-->
    <!--对象工厂-->
    <!--<objectFactory type=""/>-->
    <!--插件-->
    <!--<plugins>-->
    <!--<plugin interceptor=""></plugin>-->
    <!--</plugins>-->

    <!--
        配置环境
        支持多个数据库环境
    -->
    <environments default="mysql">
        <!--环境变量-->
        <environment id="mysql">
            <!--事务管理器-->
            <transactionManager type="jdbc"/>
            <!--数据源-->
            <dataSource type="pooled">
                <property name="driver" value="${jdbc.driverClassName}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>

        <!--环境变量-->
        <environment id="oracle">
            <!--事务管理器-->
            <transactionManager type="jdbc"/>
            <!--数据源-->
            <dataSource type="pooled">
                <property name="driver" value="${orcl.driver}"/>
                <property name="url" value="${orcl.url}"/>
                <property name="username" value="${orcl.username}"/>
                <property name="password" value="${orcl.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--数据库厂商标识-->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据库厂商起别名 ，可以支持不同数据库版本的SQL -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>

    <!-- 映射文件加载 -->
    <mappers>
        <!--
            class:引用（注册）接口
                1.有SQL映射文件，映射文件名必须和接口同名，并且放在与接口同一个目录下；
                2.没有SQL映射文件，所有的SQL都是利用注解写在接口上；
                推荐：比较重要的，复杂的Dao接口写成SQL映射文件
                     不重要，简单的Dao接口为了开发快速可以使用注解；
        -->
      <!-- <mapper class="com.iwsx.spring_mybatis.dao.AddressMapper"></mapper>-->

        <!-- resource 按照类路径加载 -->
        <!--<mapper resource="com.iwsx.spring_mybatis.dao.UserMapper"></mapper>-->

        <!-- package 按照包路径加载，要求接口和mapper在同一个路径下 -->
        <package name="com.iwsx.spring_mybatis.dao"></package>
    </mappers>
</configuration>